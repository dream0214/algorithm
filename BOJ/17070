#DFS

import sys
input=sys.stdin.readline
n=int(input())

house=[[-1]*(n+2) for _ in range(n+2)]
global ans
ans=0
direction=0 #0은 가로, 1은 세로, 2는 대각선
a=1
b=2

for i in range(n):
    house[i+1]=[-1]+list(map(int,input().split()))+[-1]

def solve(a,b,direction):
    global ans
    while(True):
        if a==n and b==n:
            ans+=1
            return;
        if direction==0:
            if b<n and house[a][b+1] == 0:
                solve(a,b+1,0)
                if a<n and house[a+1][b]==0 and house[a+1][b+1]==0:
                    solve(a+1,b+1,2)
            return
        if direction==1:
            if a<n and house[a+1][b]==0:
                solve(a+1,b,1)
                if b<n and house[a][b+1]==0 and house[a+1][b+1]==0:
                    solve(a+1,b+1,2)
            return
        if direction==2:
            if b < n and house[a][ b + 1] == 0:
                solve(a, b + 1, 0)
                if a<n and house[a+1][b]==0 and house[a+1][b+1]==0:
                    solve(a+1,b+1,2)
            if a<n and house[a+1][b]==0:
                solve(a+1,b,1)
            return

solve(a,b,direction)
print(ans)



#DP
import sys
input=sys.stdin.readline
n=int(input())

house=[[-1]*(n+2) for _ in range(n+2)]
global ans
ans=0
dp=[[[0 for _ in range(3)] for _ in range(n+1)] for _ in range(n+1)]

for i in range(n):
    house[i+1]=[-1]+list(map(int,input().split()))+[-1]
for i in range(2,n+1):
    if house[1][i]==1:
        break
    dp[1][i][0]=1

for i in range(2,n+1):
    for j in range(2,n+1):
        if house[i][j]==1:
            continue
        dp[i][j][0]=dp[i][j-1][0]+dp[i][j-1][2]
        dp[i][j][1]=dp[i-1][j][1]+dp[i-1][j][2]
        dp[i][j][2]=dp[i-1][j-1][0]+dp[i-1][j-1][1]+dp[i-1][j-1][2]
        if house[i-1][j]==1:
            dp[i][j][1]=0
            dp[i][j][2]=0
        if house[i][j-1]==1:
            dp[i][j][0]=0
            dp[i][j][2]=0
        if house[i-1][j-1]==1:
            dp[i][j][2]=0

print(sum(dp[n][n]))
